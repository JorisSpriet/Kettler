package org.jergometer.gui;

import org.jergometer.translation.I18n;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

/**
 * Window to choose a new program for old program names in old sessions.
 */
public class ChooseNewProgramWindow {
	private JPanel panel1;
	private JLabel headline;
	private JTree bikeProgramTree;
	private JButton assignButton;
	private JButton skipButton;
	private JTextArea explanation;

// getters and setters

	public JLabel getHeadline() {
		return headline;
	}

	public JTree getBikeProgramTree() {
		return bikeProgramTree;
	}

	public JButton getAssignButton() {
		return assignButton;
	}

	public JButton getSkipButton() {
		return skipButton;
	}

	public JTextArea getExplanation() {
		return explanation;
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		headline = new JLabel();
		headline.setFont(new Font(headline.getFont().getName(), Font.PLAIN, headline.getFont().getSize()));
		this.$$$loadLabelText$$$(headline, ResourceBundle.getBundle("org/jergometer/translation/jergometer").getString("choose_new_program_dialog.sessions_uses_unknown_program"));
		headline.putClientProperty("html.disable", Boolean.TRUE);
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel1.add(headline, gbc);
		bikeProgramTree = new JTree();
		bikeProgramTree.setShowsRootHandles(false);
		bikeProgramTree.putClientProperty("JTree.lineStyle", "");
		bikeProgramTree.putClientProperty("html.disable", Boolean.TRUE);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.gridwidth = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(0, 5, 0, 5);
		panel1.add(bikeProgramTree, gbc);
		assignButton = new JButton();
		this.$$$loadButtonText$$$(assignButton, ResourceBundle.getBundle("org/jergometer/translation/jergometer").getString("label.assign"));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.weightx = 0.5;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(5, 5, 5, 2);
		panel1.add(assignButton, gbc);
		skipButton = new JButton();
		this.$$$loadButtonText$$$(skipButton, ResourceBundle.getBundle("org/jergometer/translation/jergometer").getString("label.skip"));
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.weightx = 0.5;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(5, 2, 5, 5);
		panel1.add(skipButton, gbc);
		explanation = new JTextArea();
		explanation.setBackground(UIManager.getColor("OptionPane.background"));
		explanation.setEditable(false);
		explanation.setEnabled(true);
		explanation.setLineWrap(true);
		explanation.setRows(1);
		explanation.setText(ResourceBundle.getBundle("org/jergometer/translation/jergometer").getString("choose_new_program_dialog.explanation"));
		explanation.setWrapStyleWord(true);
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 2;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(0, 5, 5, 5);
		panel1.add(explanation, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel1;
	}
}
